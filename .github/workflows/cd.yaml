name: Kubernetes CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          # currently we do not support cd to production, its only for future reference
          - production
env:
  CI: false
  COMMIT: ${{ github.sha }}

permissions:
  contents: read
  pull-requests: read
jobs:
  detect-changes:
  name: Detect Changes
  runs-on: ubuntu-latest
  outputs:
    ui_changed: ${{ steps.filter.outputs.ui }}
    environment: ${{ steps.set-env.outputs.environment }}
  steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Set environment context
      id: set-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Check changed files
      id: filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          ui:
            - './**'

    - name: Export change detection outputs
      run: |
        printf "UI_CHANGED=%q\n" "${{ steps.filter.outputs.ui }}" >> "$GITHUB_ENV"

  build-and-push:
  name: Build and Push Docker Image
  runs-on: ubuntu-latest
  needs: detect-changes
  if: needs.detect-changes.outputs.ui_changed == 'true'
  environment: ${{ needs.detect-changes.outputs.environment }}
  permissions:
    id-token: write
  env:
    SERVICE: strata-faucet
    CI: false
    COMMIT: ${{ github.sha }}
  steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Configure AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: "true"

    - name: Build and Push Docker Image
      id: build-and-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      run: |
        SHORT_TAG="${COMMIT::7}"
        DOCKERFILE_PATH="./Dockerfile"
        CONTEXT_DIR="."
        ECR_REPOSITORY="$ECR_REPOSITORY_PREFIX/${SERVICE}"

        echo "Building Docker image for $SERVICE with tag $SHORT_TAG"

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_TAG -f $DOCKERFILE_PATH $CONTEXT_DIR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_TAG
  update-helm-values:
  name: Update Helm Values
  needs: [build-and-push, detect-changes]
  if: needs.detect-changes.outputs.ui_changed == 'true'
  runs-on: ubuntu-latest
  steps:
    - name: Set up SSH for private repo access
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DEPLOYMENTS_REPO_WRITE }}

    - name: Clone deployments repo (specific branch)
      env:
        BRANCH_OF_DEPLOYMENT_REPO: ${{ vars.BRANCH_OF_DEPLOYMENT_REPO }}
      run: |
        git clone --depth=1 --branch $BRANCH_OF_DEPLOYMENT_REPO git@github.com:alpenlabs/deployments.git deployments
        cd deployments
        git checkout $BRANCH_OF_DEPLOYMENT_REPO

    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq

    - name: Update Docker image tag in Helm values
      env:
        CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
        COMMIT: ${{ github.sha }}
      run: |
        SHORT_TAG="${COMMIT//[^a-zA-Z0-9._-]/}"
        SHORT_TAG="${SHORT_TAG:0:7}"

        VALUES_FILE="deployments/clusters/${CLUSTER_NAME}/values/strata-apps-values.yaml"

        if [ ! -f "$VALUES_FILE" ]; then
          echo "ERROR: $VALUES_FILE not found!"
          exit 1
        fi

        echo "Updating Docker tag to $SHORT_TAG in $VALUES_FILE"
        yq eval -i ".faucet.image.tag = \"$SHORT_TAG\"" "$VALUES_FILE"

    - name: Commit and push changes
      env:
        GH_ACTIONS_USER_NAME: ${{ vars.GH_ACTIONS_USER_NAME }}
        CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
        BRANCH_OF_DEPLOYMENT_REPO: ${{ vars.BRANCH_OF_DEPLOYMENT_REPO }}
        COMMIT: ${{ github.sha }}
      run: |
        SHORT_TAG="${COMMIT//[^a-zA-Z0-9._-]/}"
        SHORT_TAG="${SHORT_TAG:0:7}"

        cd deployments
        git config user.name "$GH_ACTIONS_USER_NAME"
        git config user.email "$GH_ACTIONS_USER_NAME@alpenlabs.io"

        if git diff --quiet; then
          echo "No changes to commit."
        else
          git add clusters/$CLUSTER_NAME/values
          git commit -m "Update faucet image tag to $SHORT_TAG"
          git pull --rebase origin $BRANCH_OF_DEPLOYMENT_REPO
          git push origin $BRANCH_OF_DEPLOYMENT_REPO
        fi
